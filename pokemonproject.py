# -*- coding: utf-8 -*-
"""Pokemonproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AW3GjwaA11yAErGzHy9FKCtR50PTJ6R1
"""

!apt-get install -y p7zip-full

!7z x /content/archive.zip -o/content/pokemon_images/

import kagglehub

# Download latest version
path = kagglehub.dataset_download("adampq/pokemon-tcg-all-cards-1999-2023")

print("Path to dataset files:", path)

# Installation des dépendances nécessaires
!pip install fastai
!pip install fastbook

# Importation des bibliothèques
from fastai.vision.all import *
from fastai.vision.widgets import *
import os

# Configuration pour éviter les warnings
import warnings
warnings.filterwarnings('ignore')

# Fonction pour créer la structure de dossiers d'exemple
def create_sample_structure():
    # Création des dossiers de base
    base_path = '/content/pokemon_images/pokemon_images'
    os.makedirs(base_path, exist_ok=True)

#trier le dataset N1
def trier():
  path = Path('/content/pokemon_images/test')
  open(fil)

from fastai.vision.all import *
from pathlib import Path
import matplotlib.pyplot as plt

def create_pokemon_classifier():
    # Définition du chemin vers les données
    path = Path('/content/pokemon_images/pokemon_images')

    # Vérification de l'existence des dossiers
    if not (path/'high_value').exists() or not (path/'low_value').exists():
        raise Exception("Les dossiers high_value et low_value doivent exister dans le chemin spécifié")

    # Création du DataBlock avec visualisation
    dblock = DataBlock(
        blocks=(ImageBlock, CategoryBlock),
        get_items=get_image_files,
        splitter=RandomSplitter(valid_pct=0.2, seed=42),
        get_y=parent_label,
        item_tfms=[Resize(460)],
        batch_tfms=[*aug_transforms(size=224, min_scale=0.75)],
    )

    # Vérification de la structure des données
    try:
        dblock.summary(path)
    except Exception as e:
        print(f"Erreur lors de la vérification des données: {str(e)}")
        return None

    # Création des dataloaders
    try:
        dls = dblock.dataloaders(path, bs=32)

        # Affichage d'un batch d'images
        print("\nAffichage d'un exemple de batch:")
        dls.show_batch(max_n=9, figsize=(10,10))
        plt.show()

        # Création et entraînement du modèle
        learn = vision_learner(dls, resnet34, metrics=[error_rate, accuracy])

        # Recherche du learning rate optimal
        print("\nRecherche du learning rate optimal...")
        learn.lr_find()

        # Entraînement du modèle
        print("\nDébut de l'entraînement...")
        learn.fine_tune(
            4,
            base_lr=1e-3,
            freeze_epochs=2,
            cbs=[
                SaveModelCallback(monitor='accuracy', comp=np.greater),
                ShowGraphCallback()
            ]
        )

        # Sauvegarde du modèle
        learn.export('pokemon_card_classifier.pkl')

        return learn

    except Exception as e:
        print(f"Une erreur s'est produite: {str(e)}")
        print("\nAssurez-vous d'avoir:")
        print("1. Créé les dossiers 'high_value' et 'low_value' dans le chemin spécifié")
        print("2. Ajouté des images de cartes Pokémon dans ces dossiers")
        return None

def predict_card(learn, image_path):
    """
    Prédit la valeur d'une carte Pokémon
    """
    try:
        img = PILImage.create(image_path)
        pred, pred_idx, probs = learn.predict(img)

        # Affichage de l'image et de la prédiction
        plt.figure(figsize=(8, 8))
        plt.imshow(img)
        plt.axis('off')
        plt.title(f"Prédiction: {pred}\nProbabilité: {probs[pred_idx]:.4f}")
        plt.show()

        return pred, probs[pred_idx]

    except Exception as e:
        print(f"Erreur lors de la prédiction: {str(e)}")
        return None, None

# Exemple d'utilisation
if __name__ == "__main__":
    # Création et entraînement du modèle
    learn = create_pokemon_classifier()

    if learn is not None:
        # Exemple de prédiction
        image_path = "/content/pokemon_images/pokemon_images/high_value/example_card.jpg"
        predict_card(learn, image_path)

from pathlib import Path
print(Path.cwd())

from fastai.vision.all import *
from pathlib import Path
import matplotlib.pyplot as plt

# Charger le modèle enregistré
learn = load_learner('pokemon_card_classifier.pkl')

def predict_card(image_path):
    """
    Prédit la valeur d'une carte Pokémon
    """
    try:
        img = PILImage.create(image_path)
        pred, pred_idx, probs = learn.predict(img)

        # Affichage de l'image et de la prédiction
        plt.figure(figsize=(8, 8))
        plt.imshow(img)
        plt.axis('off')
        plt.title(f"Prédiction: {pred}\nProbabilité: {probs[pred_idx]:.4f}")
        plt.show()

        return pred, probs[pred_idx]

    except Exception as e:
        print(f"Erreur lors de la prédiction: {str(e)}")
        return None, None

# Exemple d'utilisation
image_path = "/content/1729105644.jpeg"
predict_card(image_path)